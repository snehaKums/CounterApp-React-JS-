{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","components/navBar.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Counter","onClick","props","onDecrement","counter","className","this","getBadgeClasses","formatCount","onIncrement","onDelete","id","classes","value","Component","Counters","onReset","counters","map","key","NavBar","href","totalCounter","App","state","handleIncrement","index","indexOf","setState","handleDecrement","handleDelete","counterId","filter","c","handleReset","Fragment","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af1d9c60.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <button \r\n                    onClick={() => this.props.onDecrement(this.props.counter)} \r\n                    className=\"btn btn-secondary btn-sm\">\r\n                        Decrement\r\n                </button>\r\n                <span className={this.getBadgeClasses()}>\r\n                    {this.formatCount()}\r\n                </span>\r\n                <button \r\n                    onClick={() => this.props.onIncrement(this.props.counter)} \r\n                    className=\"btn btn-secondary btn-sm\">\r\n                        Increment\r\n                </button>\r\n                <button \r\n                    onClick={()=>this.props.onDelete(this.props.counter.id)} \r\n                    className=\"btn btn-danger btn-sm m-2\">\r\n                        Delete\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n    formatCount(){\r\n        const {value} = this.props.counter;\r\n        return value === 0 ? <h5>Zero</h5>:value\r\n    }\r\n}\r\n \r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <button\r\n                    onClick={this.props.onReset}\r\n                    className=\"btn btn-primary btn-sm m-2\">\r\n                        Reset\r\n                    </button>\r\n\r\n                {this.props.counters.map(counter => (\r\n                <Counter \r\n                    key={counter.id} \r\n                    onDecrement={this.props.onDecrement}\r\n                    onDelete={this.props.onDelete} \r\n                    onIncrement={this.props.onIncrement}\r\n                    counter={counter} \r\n                 />\r\n                ))}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Counters;","import React, { Component } from 'react';\r\n\r\nclass NavBar extends Component {\r\n    render() { \r\n        return ( \r\n            <nav className=\"navbar navbar-light bg-light\">\r\n                <a className=\"navbar-brand\" href=\"#\">\r\n                    Navbar{\" \"}\r\n                <span className=\"badge badge-pill badge-secondary\">\r\n                    {this.props.totalCounter}\r\n                </span>\r\n                </a>\r\n            </nav>\r\n         );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import React, { Component } from 'react';\nimport './App.css';\nimport Counters from './components/counters';\nimport NavBar from './components/navBar';\n\nclass App extends Component{\n  state = { \n    counters:[\n        {id:1,value:0},\n        {id:2,value:0},\n        {id:3,value:0},\n        {id:4,value:0},\n\n    ]\n }\n handleIncrement = counter => {\n     const counters = [...this.state.counters];\n     const index = counters.indexOf(counter)\n     counters[index] = {...counter};\n     counters[index].value++;\n     this.setState({counters});\n\n }\n handleDecrement = counter => {\n  const counters = [...this.state.counters];\n  const index = counters.indexOf(counter)\n  counters[index] = {...counter};\n  counters[index].value--;\n  if(counters[index].value >= 0){\n    this.setState({counters});\n  }\n\n}\n handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId)\n    this.setState({counters})\n    // console.log(counterId + \"----- \")\n }\n handleReset = () => {\n    const counters = this.state.counters.map(c=>{\n        c.value = 0;\n        return c;\n     })\n     this.setState({counters});\n }\nrender(){\n  return (\n    <React.Fragment>\n      <NavBar totalCounter={this.state.counters.filter(c=> c.value>0).length} />\n      <main className = \"container\">\n        <Counters \n        counters={this.state.counters} \n        onReset={this.handleReset} \n        onDecrement={this.handleDecrement}\n        onIncrement={this.handleIncrement} \n        onDelete={this.handleDelete} />\n      </main>\n    </React.Fragment>\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}